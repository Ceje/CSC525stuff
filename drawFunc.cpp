#include "drawFunc.h"
#include "IOFunc.h"

#ifdef __APPLE__
#include <OpenGL/OpenGL.h>
#include <GLUT/glut.h>
#else
#include <GL/glut.h>
#endif
GLubyte pattern[]={0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08,0x09,0x0a,0x0b,0x0c,0x0d,0x0e,0x0f,0xf0,0xe0,0xd0,0xc0,0xb0,0xa0,0x90,0x80,0x70,0x60,0x50,0x40,0x30,0x20,0x10,0x00};
char text[9]="CAUTION!";
GLubyte bitmap[]={
//arrowhead
0x00,0x01,0x80,0x00,
0x00,0x03,0xc0,0x00,
0x00,0x07,0xe0,0x00,
0x00,0x0f,0xf0,0x00,
0x00,0x1f,0xf8,0x00,
0x00,0x3f,0xfc,0x00,
0x00,0x7f,0xfe,0x00,
0x00,0xff,0xff,0x00,
0x01,0xff,0xff,0x80,
0x03,0xff,0xff,0xc0,
0x07,0xff,0xff,0xe0,
0x0f,0xff,0xff,0xf0,
0x1f,0xff,0xff,0xf8,
0x3f,0xff,0xff,0xfc,
0x7f,0xff,0xff,0xfe,
0xff,0xff,0xff,0xff,
//tail1
0x00,0xff,0xff,0x00,
0x00,0xff,0xff,0x00,
0x00,0x7f,0xff,0x80,
0x00,0x7f,0xff,0x80,

0x00,0x3f,0xff,0xc0,
0x00,0x3f,0xff,0xc0,
0x00,0x1f,0xff,0xe0,
0x00,0x1f,0xff,0xe0,

0x00,0x0f,0xff,0xf0,
0x00,0x0f,0xff,0xf0,
0x00,0x07,0xff,0xf8,
0x00,0x07,0xff,0xf8,

0x00,0x03,0xff,0xfc,
0x00,0x03,0xff,0xfc,
0x00,0x01,0xff,0xfe,
0x00,0x01,0xff,0xfe,

0x00,0x00,0xff,0xff,
0x00,0x00,0xff,0xff,
//bridge
0xff,0xff,0xff,0xff,
0xff,0xff,0xff,0xff,
0xff,0xff,0xff,0xff,
0xff,0xff,0xff,0xff,

0xff,0xff,0xff,0xff,
0xff,0xff,0xff,0xff,
0xff,0xff,0xff,0xff,
0xff,0xff,0xff,0xff,
//tail 2
0xff,0xff,0x00,0x00,
0xff,0xff,0x00,0x00,
0x7f,0xff,0x80,0x00,
0x7f,0xff,0x80,0x00,

0x3f,0xff,0xc0,0x00,
0x3f,0xff,0xc0,0x00,
0x1f,0xff,0xe0,0x00,
0x1f,0xff,0xe0,0x00,

0x0f,0xff,0xf0,0x00,
0x0f,0xff,0xf0,0x00,
0x07,0xff,0xf8,0x00,
0x07,0xff,0xf8,0x00,

0x03,0xff,0xfc,0x00,
0x03,0xff,0xfc,0x00,
0x01,0xff,0xfe,0x00,
0x01,0xff,0xfe,0x00,
0x00,0xff,0xff,0x00,
0x00,0xff,0xff,0x00
};
void myInit()
{
    glClearColor(1, 1, 1, 0);
    gluOrtho2D(-300, 300, -300, 300);
}

void myDisplayCallback()
{
    glClear(GL_COLOR_BUFFER_BIT);
    
    drawImage();

    glFlush();
    writeImg();
}

void drawImage()
{
    glLineWidth(1.0f);
	//axis
    glColor3b(0, 0, 0);
      glBegin(GL_LINES);
	  glVertex2i(-250, 0);
	  glVertex2i(250, 0);
	  glVertex2i(0, 250);
	  glVertex2i(0, -250);
    glEnd();
	//shape
	glEnable(GL_POLYGON_STIPPLE);
	glPolygonStipple(pattern);
    glPolygonStipple(pattern);
      glBegin(GL_TRIANGLES);
	  glColor3f(1, 1, 0);
	  glVertex2i(-180, -180);
	  glColor3f(1, 1.0, 0);
	  glVertex2i(0, 256);
	  glColor3f(1, 1, 0);
	  glVertex2i(185, -185);
	glEnd();
	
	//bitmap
	glColor3f(0,0,0);
	glRasterPos2i(-24,-50);
	glBitmap(32,64,0,0,33,0,bitmap);
	//text
	glRasterPos2i(-90,-110);
	for(int i=0; i<9;i++){
	  glutBitmapCharacter(GLUT_BITMAP_TIMES_ROMAN_24, text[i]);
	}
	//line
	glPointSize(3);
    glBegin(GL_LINE);
	  glVertex2i(-90,-115);
	  glVertex2i(90,-115);
	glEnd();
	//circle
	glBegin(GL_POINTS);		
     for(int i=-180; i<=180; i++){
       glVertex2d(sin(i)*256, cos(i)*256);
     }
    glEnd();
}
