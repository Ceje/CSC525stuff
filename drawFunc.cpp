#include "drawFunc.h"
#include "IOFunc.h"
#include <cmath>

GLfloat myPixelMap[512][512][3];

GLubyte pattern[]={
0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08,0x09,0x0a,0x0b,0x0c,0x0d,0x0e,0x0f,
0xf0,0xe0,0xd0,0xc0,0xb0,0xa0,0x90,0x80,0x70,0x60,0x50,0x40,0x30,0x20,0x10,0x00,
0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08,0x09,0x0a,0x0b,0x0c,0x0d,0x0e,0x0f,
0xf0,0xe0,0xd0,0xc0,0xb0,0xa0,0x90,0x80,0x70,0x60,0x50,0x40,0x30,0x20,0x10,0x00,
0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08,0x09,0x0a,0x0b,0x0c,0x0d,0x0e,0x0f,
0xf0,0xe0,0xd0,0xc0,0xb0,0xa0,0x90,0x80,0x70,0x60,0x50,0x40,0x30,0x20,0x10,0x00,
0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08,0x09,0x0a,0x0b,0x0c,0x0d,0x0e,0x0f,
0xf0,0xe0,0xd0,0xc0,0xb0,0xa0,0x90,0x80,0x70,0x60,0x50,0x40,0x30,0x20,0x10,0x00};

char text[9]="CAUTION!";

GLubyte bitmap[]={
//arrowhead
0x00,0x00,0x00,0x01,0x80,0x00,0x00,0x00,
0x00,0x00,0x00,0x03,0xc0,0x00,0x00,0x00,
0x00,0x00,0x00,0x07,0xe0,0x00,0x00,0x00,
0x00,0x00,0x00,0x0f,0xf0,0x00,0x00,0x00, //4

0x00,0x00,0x00,0x1f,0xf8,0x00,0x00,0x00,
0x00,0x00,0x00,0x3f,0xfc,0x00,0x00,0x00,
0x00,0x00,0x00,0x7f,0xfe,0x00,0x00,0x00,
0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00, //8

0x00,0x00,0x01,0xff,0xff,0x80,0x00,0x00,
0x00,0x00,0x03,0xff,0xff,0xc0,0x00,0x00,
0x00,0x00,0x07,0xff,0xff,0xe0,0x00,0x00,
0x00,0x00,0x0f,0xff,0xff,0xf0,0x00,0x00, //12

0x00,0x00,0x1f,0xff,0xff,0xf8,0x00,0x00,
0x00,0x00,0x3f,0xff,0xff,0xfc,0x00,0x00,
0x00,0x00,0x7f,0xff,0xff,0xfe,0x00,0x00,
0x00,0x00,0xff,0xff,0xff,0xff,0x00,0x00,//16

0x00,0x01,0xff,0xff,0xff,0xff,0x80,0x00,
0x00,0x03,0xff,0xff,0xff,0xff,0xc0,0x00,
0x00,0x07,0xff,0xff,0xff,0xff,0xe0,0x00,
0x00,0x0f,0xff,0xff,0xff,0xff,0xf0,0x00,//20

0x00,0x1f,0xff,0xff,0xff,0xff,0xf8,0x00,
0x00,0x3f,0xff,0xff,0xff,0xff,0xfc,0x00,
0x00,0x7f,0xff,0xff,0xff,0xff,0xfe,0x00,
0x00,0xff,0xff,0xff,0xff,0xff,0xff,0x00,//24

0x01,0xff,0xff,0xff,0xff,0xff,0xff,0x80,
0x03,0xff,0xff,0xff,0xff,0xff,0xff,0xc0,
0x07,0xff,0xff,0xff,0xff,0xff,0xff,0xe0,
0x0f,0xff,0xff,0xff,0xff,0xff,0xff,0xf0,//28

0x1f,0xff,0xff,0xff,0xff,0xff,0xff,0xf8,
0x3f,0xff,0xff,0xff,0xff,0xff,0xff,0xfc,
0x7f,0xff,0xff,0xff,0xff,0xff,0xff,0xfe,
0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,//32
//tail1
0x00,0x00,0x0f,0xff,0xff,0xf0,0x00,0x00,
0x00,0x00,0x0f,0xff,0xff,0xf0,0x00,0x00,
0x00,0x00,0x07,0xff,0xff,0xf8,0x00,0x00,
0x00,0x00,0x07,0xff,0xff,0xf8,0x00,0x00,//36

0x00,0x00,0x03,0xff,0xff,0xfc,0x00,0x00,
0x00,0x00,0x03,0xff,0xff,0xfc,0x00,0x00,
0x00,0x00,0x01,0xff,0xff,0xfe,0x00,0x00,
0x00,0x00,0x01,0xff,0xff,0xfe,0x00,0x00,//40

0x00,0x00,0x00,0xff,0xff,0xff,0x00,0x00,
0x00,0x00,0x00,0xff,0xff,0xff,0x00,0x00,
0x00,0x00,0x00,0x7f,0xff,0xff,0x80,0x00,
0x00,0x00,0x00,0x7f,0xff,0xff,0x80,0x00,//44

0x00,0x00,0x00,0x3f,0xff,0xff,0xc0,0x00,
0x00,0x00,0x00,0x3f,0xff,0xff,0xc0,0x00,
0x00,0x00,0x00,0x1f,0xff,0xff,0xe0,0x00,
0x00,0x00,0x00,0x1f,0xff,0xff,0xe0,0x00,//48

0x00,0x00,0x00,0x0f,0xff,0xff,0xf0,0x00,
0x00,0x00,0x00,0x0f,0xff,0xff,0xf0,0x00,
0x00,0x00,0x00,0x07,0xff,0xff,0xf8,0x00,
0x00,0x00,0x00,0x07,0xff,0xff,0xf8,0x00,//52

0x00,0x00,0x00,0x03,0xff,0xff,0xfc,0x00,
0x00,0x00,0x00,0x03,0xff,0xff,0xfc,0x00,
0x00,0x00,0x00,0x01,0xff,0xff,0xfe,0x00,
0x00,0x00,0x00,0x01,0xff,0xff,0xfe,0x00,//56

0x00,0x00,0x00,0x00,0xff,0xff,0xff,0x00,
0x00,0x00,0x00,0x00,0xff,0xff,0xff,0x00,
0x00,0x00,0x00,0x00,0x7f,0xff,0xff,0x80,
0x00,0x00,0x00,0x00,0x7f,0xff,0xff,0x80,//60

0x00,0x00,0x00,0x00,0x3f,0xff,0xff,0xc0,
0x00,0x00,0x00,0x00,0x3f,0xff,0xff,0xc0,
0x00,0x00,0x00,0x00,0x1f,0xff,0xff,0xe0,
0x00,0x00,0x00,0x00,0x1f,0xff,0xff,0xe0,//64

0x00,0x00,0x00,0x00,0x0f,0xff,0xff,0xf0,
0x00,0x00,0x00,0x00,0x0f,0xff,0xff,0xf0,
0x00,0x00,0x00,0x00,0x07,0xff,0xff,0xf8,
0x00,0x00,0x00,0x00,0x07,0xff,0xff,0xf8,//68

0x00,0x00,0x00,0x00,0x03,0xff,0xff,0xfc,
0x00,0x00,0x00,0x00,0x03,0xff,0xff,0xfc,
0x00,0x00,0x00,0x00,0x01,0xff,0xff,0xfe,
0x00,0x00,0x00,0x00,0x01,0xff,0xff,0xfe,//72

0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xff,
0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xff,//76*
//bridge
0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,//80

0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,//84

0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,//88

0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,//92

//tail 2
0xff,0xff,0xff,0x00,0x00,0x00,0x00,0x00,
0xff,0xff,0xff,0x00,0x00,0x00,0x00,0x00,
0x7f,0xff,0xff,0x80,0x00,0x00,0x00,0x00,
0x7f,0xff,0xff,0x80,0x00,0x00,0x00,0x00,//96

0x3f,0xff,0xff,0xc0,0x00,0x00,0x00,0x00,
0x3f,0xff,0xff,0xc0,0x00,0x00,0x00,0x00,
0x1f,0xff,0xff,0xe0,0x00,0x00,0x00,0x00,
0x1f,0xff,0xff,0xe0,0x00,0x00,0x00,0x00,//100

0x0f,0xff,0xff,0xf0,0x00,0x00,0x00,0x00,
0x0f,0xff,0xff,0xf0,0x00,0x00,0x00,0x00,
0x07,0xff,0xff,0xf8,0x00,0x00,0x00,0x00,
0x07,0xff,0xff,0xf8,0x00,0x00,0x00,0x00,//104

0x03,0xff,0xff,0xfc,0x00,0x00,0x00,0x00,
0x03,0xff,0xff,0xfc,0x00,0x00,0x00,0x00,
0x01,0xff,0xff,0xfe,0x00,0x00,0x00,0x00,
0x01,0xff,0xff,0xfe,0x00,0x00,0x00,0x00,//108

0x00,0xff,0xff,0xff,0x00,0x00,0x00,0x00,
0x00,0xff,0xff,0xff,0x00,0x00,0x00,0x00,
0x00,0x7f,0xff,0xff,0x80,0x00,0x00,0x00,
0x00,0x7f,0xff,0xff,0x80,0x00,0x00,0x00,//112

0x00,0x3f,0xff,0xff,0xc0,0x00,0x00,0x00,
0x00,0x3f,0xff,0xff,0xc0,0x00,0x00,0x00,
0x00,0x1f,0xff,0xff,0xe0,0x00,0x00,0x00,
0x00,0x1f,0xff,0xff,0xe0,0x00,0x00,0x00,//116

0x00,0x0f,0xff,0xff,0xf0,0x00,0x00,0x00,
0x00,0x0f,0xff,0xff,0xf0,0x00,0x00,0x00,
0x00,0x07,0xff,0xff,0xf8,0x00,0x00,0x00,
0x00,0x07,0xff,0xff,0xf8,0x00,0x00,0x00,//120

0x00,0x03,0xff,0xff,0xfc,0x00,0x00,0x00,
0x00,0x03,0xff,0xff,0xfc,0x00,0x00,0x00,
0x00,0x01,0xff,0xff,0xfe,0x00,0x00,0x00,
0x00,0x01,0xff,0xff,0xfe,0x00,0x00,0x00,//124

0x00,0x00,0xff,0xff,0xff,0x00,0x00,0x00,
0x00,0x00,0xff,0xff,0xff,0x00,0x00,0x00,
0x00,0x00,0x7f,0xff,0xff,0x80,0x00,0x00,
0x00,0x00,0x7f,0xff,0xff,0x80,0x00,0x00,//128

0x00,0x00,0x3f,0xff,0xff,0xc0,0x00,0x00,
0x00,0x00,0x3f,0xff,0xff,0xc0,0x00,0x00,
0x00,0x00,0x1f,0xff,0xff,0xe0,0x00,0x00,
0x00,0x00,0x1f,0xff,0xff,0xe0,0x00,0x00,//132

0x00,0x00,0x0f,0xff,0xff,0xf0,0x00,0x00,
0x00,0x00,0x0f,0xff,0xff,0xf0,0x00,0x00


};

void loadPixelMap()
{
    for(int y=0; y<512; y++)
    {
	for(int x=0; x<512; x++)
	{
	    myPixelMap[y][x][0] = 0.0;
	    myPixelMap[y][x][1] = 0.0;
	    
	    if(x<256)
	    {
		myPixelMap[y][x][0] = (1.0/256)*(256-x);
		myPixelMap[y][x][2] = (1.0/256)*x;
	    }
	    else
	    {
		myPixelMap[y][x][1] = (1.0/256)*(x-256);
		myPixelMap[y][x][2] = (1.0/256)*(512-x);
	    }
	}
    }
}

void myInit()
{
    glClearColor(1, 1, 1, 0);
    gluOrtho2D(-300, 300, -300, 300);
}

void myDisplayCallback()
{
    glClear(GL_COLOR_BUFFER_BIT);
    
    drawImage();

    glFlush();
    writeImg();
}

void drawImage()
{
    glLineWidth(1.0f);
	
    glRasterPos2i(-256, -256);

    glDrawPixels(512, 512, GL_RGB, GL_FLOAT, myPixelMap);

    //axis	
    glColor3b(0, 0, 0);
      glBegin(GL_LINES);
	  glVertex2i(-250, 0);
	  glVertex2i(250, 0);
	  glVertex2i(0, 250);
	  glVertex2i(0, -250);
    glEnd();
	//shape
	glPixelStorei(GL_UNPACK_ALIGNMENT, 1);
	glEnable(GL_POLYGON_STIPPLE);
	glPolygonStipple(pattern);
      glBegin(GL_TRIANGLES);
	  glColor3f(1, 1, 0);
	  glVertex2i(-180, -180);
	  glColor3f(1, 1.0, 0);
	  glVertex2i(0, 256);
	  glColor3f(1, 1, 0);
	  glVertex2i(185, -185);
	glEnd();
	glDisable(GL_POLYGON_STIPPLE);

	glColor3f(0.0, 0.0, 0.0);
	glBegin(GL_QUADS);
	    glVertex2i(-75, -90);
	    glVertex2i(65, -90);
	    glVertex2i(65, -120);
	    glVertex2i(-75, -120);
	glEnd();
	
	//bitmap
	glColor3f(1.0,0,0);
	glRasterPos2i(-32,-70);
	glPixelStorei(GL_UNPACK_ALIGNMENT,8);
	glBitmap(64,132,0,0,33,0,bitmap);
	//text
	glRasterPos2i(-65,-110);
	for(int i=0; i<9;i++){
	  glutBitmapCharacter(GLUT_BITMAP_TIMES_ROMAN_24, text[i]);
	}
	//line
	glPointSize(3);
    glBegin(GL_LINES);
	  glVertex2i(-65,-115);
	  glVertex2i(55,-115);
	glEnd();
	//circle
	glBegin(GL_POINTS);	
     for(int i=-360; i<=360; i++){
       glVertex2d(sin(i)*256, cos(i)*256);
     }
    glEnd();
}
